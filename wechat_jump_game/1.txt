# coding: utf-8import osimport shutilimport timeimport mathfrom PIL import Image, ImageDrawimport random# === 思路 ===screenshot_backup_dir = 'screenshot_backups/'if not os.path.isdir(screenshot_backup_dir):        os.mkdir(screenshot_backup_dir)def pull_screenshot():    os.system('adb shell screencap -p /sdcard/1.png')    os.system('adb pull /sdcard/1.png .')def click(cor):    press_time = 200    cmd = 'adb shell input swipe {0} {1} {2} {3} {4}'.format(cor[0], cor[1], \            cor[0], cor[1], press_time)    print(cmd)    os.system(cmd)def pull():    cor = [856, 1978]    click(cor)def push():    cor = [851, 1097]    click(cor)def send():    cor = [991, 1092]    click(cor)def slide2right():    press_time = 200    cmd = 'adb shell input swipe {0} {1} {2} {3} {4}'.format(549, 1440, \            238, 1440, press_time)    print(cmd)    os.system(cmd)def slide2left():    press_time = 200    cmd = 'adb shell input swipe {0} {1} {2} {3} {4}'.format(238, 1440, \            549, 1440, press_time)    print(cmd)    os.system(cmd)def inputText(s):        cmd = 'adb shell am broadcast -a ADB_INPUT_TEXT --es msg \'{}\''.format(s)    print(cmd)    os.system(cmd)def backup_screenshot(ts):    # 为了方便失败的时候 debug    if not os.path.isdir(screenshot_backup_dir):        os.mkdir(screenshot_backup_dir)    shutil.copy('1.png', '{}{}.png'.format(screenshot_backup_dir, ts))def main():    while True:        pull_screenshot()        im = Image.open("./1.png")        ts = int(time.time())        backup_screenshot(ts)        time.sleep(random.uniform(1, 1.1))   # 为了保证截图的时候应落稳了，多延迟一会儿if __name__ == '__main__':    main()